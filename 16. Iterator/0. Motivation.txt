How traversal of data structures happens and who makes it happen

A object that facilitates(полегшує) the traversal(обхід) of a data structure

This pattern says that whenever we are having this concern(traversal), we are doing separation of concerns (SPR)
we are going to put it into a separate class(Iterator class) and then use that class wheneven something asks for the mechanism to
traverse something

Iterator:
- Keeps the reference to the current element
- Knows how to move to a different element

If you want object to be iterable you - it has to have an __iter__ method
Iterator protocol requires:
__iter__ method to expose the iterator
iterator has to have next method which returns each of the iterated elements



Iterator vs Iterable
Iterable is an object, that we can iterate over.
It generates an Iterator when passed to iter() method.

An iterator is an object, which is used to iterate over an iterable object using the __next__() method.

Iterators have the __next__() method, which returns the next item of the object. Note that every iterator is also an
iterable, but not every iterable is an iterator.
For example, a list is iterable but a list is not an iterator.
An iterator can be created from an iterable by using the function iter().

To make this possible, the class of an object
 needs either a method __iter__, which returns an iterator, or a __getitem__
 method with sequential indexes starting with 0.
